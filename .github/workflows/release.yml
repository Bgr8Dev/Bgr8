name: 🚀 Automated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  prepare-release:
    name: 🚀 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_notes: ${{ steps.release_notes.outputs.notes }}
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: 🔍 Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: 🔍 Generate release notes
        id: release_notes
        run: |
          echo "🔍 Generating release notes..."
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # Get commits since last release
            COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            
            # Categorize commits
            FEATURES=$(echo "$COMMITS" | grep -E "^- (feat|feature)" || true)
            FIXES=$(echo "$COMMITS" | grep -E "^- (fix|bugfix)" || true)
          else
            # First release
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
            FEATURES="$COMMITS"
            FIXES=""
          fi
          
          # Generate release notes
          cat > release_notes.md << EOF
          ## 🎉 What's New in ${{ steps.version.outputs.version }}
          
          ### ✨ Features
          $([ -n "$FEATURES" ] && echo "$FEATURES" || echo "- No new features")
          
          ### 🐛 Bug Fixes
          $([ -n "$FIXES" ] && echo "$FIXES" || echo "- No bug fixes")
          
          ### 📦 Dependencies
          - Updated all dependencies to latest compatible versions
          - Security patches applied
          
          ### 🔧 Technical Improvements
          - Code quality improvements
          - Performance optimizations
          - Enhanced error handling
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ steps.version.outputs.version }}
          EOF
          
          # Store release notes
          cat release_notes.md
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 📝 Update package.json version
        run: |
          echo "📝 Updating package.json version..."
          VERSION="${{ steps.version.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION_NUMBER=${VERSION#v}
          
          # Update package.json
          npm version $VERSION_NUMBER --no-git-tag-version
          
          echo "Updated package.json to version $VERSION_NUMBER"
      
      - name: 📝 Update CHANGELOG.md
        run: |
          echo "📝 Updating CHANGELOG.md..."
          
          # Read current changelog
          if [ -f "CHANGELOG.md" ]; then
            # Insert new version after the first "---" line
            awk -v version="${{ steps.version.outputs.version }}" -v notes="$(cat release_notes.md)" '
            /^---$/ && !found {
              print
              print "## [" version "] - " strftime("%Y-%m-%d")
              print ""
              print notes
              print ""
              found = 1
              next
            }
            { print }
            ' CHANGELOG.md > CHANGELOG.md.tmp
            mv CHANGELOG.md.tmp CHANGELOG.md
          else
            # Create new changelog
            cat > CHANGELOG.md << 'EOF'
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ---
          EOF
            cat release_notes.md >> CHANGELOG.md
          fi
      
      - name: 🔄 Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add package.json CHANGELOG.md
          git commit -m "chore: prepare release ${{ steps.version.outputs.version }}"
          
          git push origin HEAD

  build-and-test:
    name: 🏗️ Build and Test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: 🔍 Run linting
        run: npm run lint
      
      - name: 🔍 Run type checking
        run: npx tsc --noEmit
      
      - name: 🧪 Run tests
        run: |
          echo "🧪 Running tests..."
          # Add your test commands here
          # npm run test
          echo "Tests not configured yet"
      
      - name: 🏗️ Build application
        run: npm run build
      
      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: always() && needs.prepare-release.result == 'success' && needs.build-and-test.result == 'success'
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          release_name: Release ${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.prepare-release.outputs.release_notes }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
      
      - name: 📦 Upload release assets
        run: |
          echo "📦 Uploading release assets..."
          
          # Create a zip file of the build
          zip -r release-${{ needs.prepare-release.outputs.version }}.zip dist/
          
          # Upload the zip file
          gh release upload ${{ needs.prepare-release.outputs.version }} release-${{ needs.prepare-release.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: 🚀 Deploy Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, create-release]
    if: always() && needs.prepare-release.result == 'success' && needs.build-and-test.result == 'success'
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          force_orphan: true
          enable_jekyll: false
      
      - name: 📝 Update deployment status
        run: |
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release ${{ needs.prepare-release.outputs.version }} deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Live Site](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }})" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, create-release, deploy]
    if: always()
    
    steps:
      - name: 📢 Send notification
        run: |
          echo "📢 Sending release notification..."
          
          # Create notification message
          cat > notification.md << EOF
          # 🎉 New Release: ${{ needs.prepare-release.outputs.version }}
          
          A new version has been successfully released and deployed!
          
          **Version:** ${{ needs.prepare-release.outputs.version }}
          **Status:** ${{ needs.deploy.result == 'success' && '✅ Deployed' || '❌ Failed' }}
          
          **Release Notes:**
          ${{ needs.prepare-release.outputs.release_notes }}
          
          **Links:**
          - [Live Site](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})
          - [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }})
          EOF
          
          echo "Notification prepared"
          cat notification.md
