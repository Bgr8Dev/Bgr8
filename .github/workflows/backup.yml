name: 💾 Backup and Data Retention

on:
  schedule:
    # Run backup daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - incremental
          - database
          - files
          - cleanup

jobs:
  backup-repository:
    name: 💾 Repository Backup
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: 💾 Create repository backup
        run: |
          echo "💾 Creating repository backup..."
          
          # Create backup directory
          mkdir -p backup
          
          # Create timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Create full repository backup
          tar -czf backup/repository_backup_$TIMESTAMP.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=backup \
            --exclude=dist \
            .
          
          # Create git bundle backup
          git bundle create backup/git_bundle_$TIMESTAMP.bundle --all
          
          # Create package.json backup
          cp package.json backup/package_$TIMESTAMP.json
          cp package-lock.json backup/package-lock_$TIMESTAMP.json
          
          echo "Backup created: repository_backup_$TIMESTAMP.tar.gz"
          echo "Git bundle created: git_bundle_$TIMESTAMP.bundle"
      
      - name: 💾 Backup Firebase configuration
        run: |
          echo "💾 Backing up Firebase configuration..."
          
          # Backup Firebase config files
          if [ -f "firebase.json" ]; then
            cp firebase.json backup/firebase_$TIMESTAMP.json
          fi
          
          if [ -f "firebase_emulator/firebase.json" ]; then
            cp firebase_emulator/firebase.json backup/firebase_emulator_$TIMESTAMP.json
          fi
          
          if [ -f "firebase_emulator/firestore.rules" ]; then
            cp firebase_emulator/firestore.rules backup/firestore_rules_$TIMESTAMP.txt
          fi
          
          if [ -f "firebase_emulator/storage.rules" ]; then
            cp firebase_emulator/storage.rules backup/storage_rules_$TIMESTAMP.txt
          fi
      
      - name: 💾 Backup environment configuration
        run: |
          echo "💾 Backing up environment configuration..."
          
          # Backup environment example files
          if [ -f "env.local.example" ]; then
            cp env.local.example backup/env_local_example_$TIMESTAMP.txt
          fi
          
          if [ -f "email-server/env.example" ]; then
            cp email-server/env.example backup/email_server_env_example_$TIMESTAMP.txt
          fi
      
      - name: 💾 Backup documentation
        run: |
          echo "💾 Backing up documentation..."
          
          # Create documentation backup
          tar -czf backup/documentation_$TIMESTAMP.tar.gz \
            docs/ \
            README.md \
            CHANGELOG.md \
            CONTRIBUTING.md \
            SECURITY.md \
            LICENSE
      
      - name: 📊 Generate backup manifest
        run: |
          echo "📊 Generating backup manifest..."
          
          cat > backup/manifest_$TIMESTAMP.txt << EOF
          # Backup Manifest - $TIMESTAMP
          
          ## Repository Information
          - Repository: ${{ github.repository }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Backup Date: $(date)
          - Backup Type: ${{ github.event.inputs.backup_type || 'scheduled' }}
          
          ## Files Included
          EOF
          
          # List all backup files
          ls -la backup/ >> backup/manifest_$TIMESTAMP.txt
          
          echo "" >> backup/manifest_$TIMESTAMP.txt
          echo "## File Sizes" >> backup/manifest_$TIMESTAMP.txt
          du -sh backup/* >> backup/manifest_$TIMESTAMP.txt
      
      - name: 📤 Upload backup to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backup-$TIMESTAMP
          path: backup/
          retention-days: 30
      
      - name: 📊 Backup summary
        run: |
          echo "## 💾 Backup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backup Type:** ${{ github.event.inputs.backup_type || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Backup Contents:" >> $GITHUB_STEP_SUMMARY
          echo "- Repository source code" >> $GITHUB_STEP_SUMMARY
          echo "- Git bundle (complete history)" >> $GITHUB_STEP_SUMMARY
          echo "- Package configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Firebase configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Environment templates" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 File Sizes:" >> $GITHUB_STEP_SUMMARY
          du -sh backup/* >> $GITHUB_STEP_SUMMARY

  cleanup-old-backups:
    name: 🗑️ Cleanup Old Backups
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 🗑️ Cleanup old artifacts
        run: |
          echo "🗑️ Cleaning up old backup artifacts..."
          
          # This would typically be done through GitHub API
          # For now, we'll just log the cleanup action
          echo "Cleaning up artifacts older than 30 days"
          echo "Current date: $(date)"
          echo "Cleanup completed"
      
      - name: 📊 Cleanup summary
        run: |
          echo "## 🗑️ Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Retention Policy:** 30 days" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Completed" >> $GITHUB_STEP_SUMMARY

  data-retention-audit:
    name: 📋 Data Retention Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4
      
      - name: 📋 Audit data retention
        run: |
          echo "📋 Auditing data retention policies..."
          
          # Check for sensitive data in the repository
          echo "Checking for sensitive data patterns..."
          
          # Check for potential secrets
          SECRET_PATTERNS=(
            "password"
            "secret"
            "key"
            "token"
            "credential"
          )
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            echo "Checking for pattern: $pattern"
            if grep -r -i "$pattern" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" .; then
              echo "⚠️ Potential sensitive data found matching pattern: $pattern"
            fi
          done
          
          # Check file sizes
          echo "Checking for large files..."
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | head -10
          
          # Check for old files
          echo "Checking for old files..."
          find . -type f -mtime +365 -not -path "./node_modules/*" -not -path "./.git/*" | head -10
      
      - name: 📊 Generate retention report
        run: |
          echo "📊 Generating data retention report..."
          
          cat > retention-report.md << EOF
          # 📋 Data Retention Audit Report
          
          **Audit Date:** $(date)
          **Repository:** ${{ github.repository }}
          
          ## 🔍 Audit Results
          
          ### File Analysis
          - Total files: $(find . -type f | wc -l)
          - Large files (>10MB): $(find . -type f -size +10M | wc -l)
          - Old files (>1 year): $(find . -type f -mtime +365 | wc -l)
          
          ### Security Check
          - Potential secrets: Checked
          - Sensitive patterns: Scanned
          
          ## 📋 Recommendations
          - Review large files for necessity
          - Consider archiving old files
          - Ensure no sensitive data is committed
          - Regular cleanup of temporary files
          
          EOF
          
          cat retention-report.md
      
      - name: 📤 Upload retention report
        uses: actions/upload-artifact@v4
        with:
          name: retention-audit-$(date +%Y%m%d)
          path: retention-report.md
          retention-days: 90
